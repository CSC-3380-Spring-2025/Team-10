@using Google.Cloud.Firestore;
@inject NavigationManager Navigation
@rendermode InteractiveServer

@inject set1 set1

@page "/CreateNew"

@*@attribute [StreamRendering]
@inject IConfiguration Configuration
@using StudySprout.Models*@

<PageTitle>CREATE NEW</PageTitle>

<header>
    <div class="logo">
        <img src="/favicon.png" alt="Study Sprout Logo" style="height: 50px; width: auto; object-fit: contain;" />
        <nav>
            <a href="/MyStudySets">MY STUDY SETS</a>
            <a href="/CreateNew">CREATE NEW SET</a>
        </nav>
    </div>

    <div class="auth-links">
        <a href="/signup">Sign up</a>
        <a href="/signin" class="GoToLogIn">Log in</a>
    </div>
</header>

<div class="banner">
    <h1><span class="highlight">CREATE</span> A NEW</h1>
    <h1><span class="highlight">STUDY SET.</span></h1>
    <img class="slink-icon" src="/Slink.png" alt="Slink Icon"/>
</div>

<div class="set-container">
    <form @onsubmit="HandleSubmit">
        <div class="form-group">
            <label for="setTitle">SET TITLE</label>
            <input type="text" id="setTitle" @bind="setTitle" class="form-control" placeholder="Enter your set's title"/>
            @*@if (!string.IsNullOrEmpty(validationErrors["TITLE"]))
            {
                <p class="alert alert-danger">@validationErrors["TITLE"]</p>
            }*@
        </div>

        <div class="form-group">
            <label for="description">DESCRIPTION</label>
            <input type="text" id="description" @bind="description" class="form-control" placeholder="Enter your set's description" />
            @*@if (!string.IsNullOrEmpty(validationErrors["DESCRIPTION"]))
            {
                <p class="alert alert-danger">@validationErrors["DESCRIPTION"]</p>
            }*@
        </div>

        <div class="form-group">
            <label for="learnBy">LEARN BY</label>
            <input type="date" id="learnBy" @bind="learnBy" class="form-control" placeholder="Enter your set's due date"/>
        </div>

        <button class="submit" type="submit" disabled="@isLoading">CREATE</button>
                @if (isLoading)
                {
                    <span>Creating set...</span>
                }
                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <p>@StatusMessage</p>
                }
    </form>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
            <p class="errorMessage">@ErrorMessage</p>
    }
</div>

<style>
    body, html {
        margin: 0;
        padding: 0;
        font-family: 'Arial', sans-serif;
        box-sizing: border-box;
    }

    * {
        box-sizing: inherit;
    }

    body {
        background-color: #ffffff;
        color: #333;
        line-height: 1.6;
        font-size: 16px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: #f8f8f8;
    }

    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: #ffffff;
        box-shadow: 0 2ptx 5px rgba(0, 0, 0, 0.1);
    }

    header nav {
        display: flex;
        gap: 49px;
    }

    header nav a {
        text-decoration: none;
        color: #4e7429;
        font-weight: bold;
        font-size: 1rem;
    }

    header nav a:hover {
        text-decoration: underline; /* Underline on hover */
    }

    .auth-links {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .auth-links a {
        color: #4e7429;
        text-decoration: none;
        font-weight: bold;
    }

    .auth-links .GoToLogIn {
        padding: 5px 15px;
        background-color: #4e7429;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .auth-links .GoToLogIn:hover {
        opacity: 0.9;
    }

    .set-container {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        color: #000000;
        font-size: 4rem;
        margin-top: -5px;
        text-shadow: 3px 5px 10px #ffffff;
        font-weight: bold;
    }
    
    h4 {
        text-align: center;
        color: #851212;
        text-shadow: 2px 2px 5px #ffffff;
        margin-top: 10px;
        font-weight: bold;
        font-size: 30px;
    }

    p {
        text-align: center;
        color: #555;
        font-size: 1.1rem;
        margin-bottom: 20px;
    }

    form {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    label {
        font-size: 1rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 5px;
        display: block;
    }

    input[type="text"], input[type="date"], textarea, select {
        width: 100%;
        padding: 12px;
        margin-bottom: 20px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    input:focus, textarea:focus, select:focus {
        border-color: #2a9d8f;
        outline: none;
    }

    button.btn {
        display: block;
        width: 100%;
        padding: 15px;
        background-color: #2a9d41;
        color: white;
        font-size: 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button.btn:hover {
        background-color: #1f7a68;
    }

    .alert {
        padding: 12px;
        border-radius: 5px;
        margin-top: 10px;
        text-align: center;
        font-size: 1rem;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    ul {
        list-style: none;
        padding: 0;
    }

    ul li {
        background: #fff;
        margin: 10px 0;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    ul li h3 {
        margin: 0;
        font-size: 1.5rem;
        color: #2a9d8f;
    }

    ul li p {
        margin: 5px 0 0;
        color: #555;
        font-size: 1rem;
    }

    footer {
        background-color: #2a9d8f;
        color: white;
        padding: 15px 0;
        text-align: center;
    }

    footer a {
        color: white;
        text-decoration: none;
    }

    footer a:hover {
        text-decoration: underline;
    }

    .logo img {
        object-fit: contain;
        display: block;
    }

    .slink-icon {
        position: absolute;
        bottom: 10px;
        right: 20px;
        height: 80px;
        width: 135px;
    }

    .banner {
        background-image: url('background3.jpg');
        background-size: cover;
        background-position: center;
        text-align: center;
        color: white;
        padding: 60px 20px;
        position: relative;
        width: 100%;
        height: 250px;
    }

    .submit {
        width: 100%;
        padding: 10px;
        background-color: #00d44a;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .submit:hover {
        background-color: #00b321;
    }
</style>

@code
{
    public string setTitle { get; set; } = string.Empty;
    public string description { get; set; } = string.Empty;
    public DateTime learnBy { get; set; } = DateTime.Now.AddDays(7);

    public bool IsSuccess { get; set; } = false;
    public string ErrorMessage { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
    private bool isLoading = false;
    
    FirestoreDb StudySproutDB = FirestoreDb.Create("studysprout-67ec9");

    private async Task HandleSubmit()
    {
        isLoading = true;
        ErrorMessage = string.Empty;
        StatusMessage = string.Empty;

        if (string.IsNullOrEmpty(setTitle) || string.IsNullOrEmpty(description))
        {
            ErrorMessage = "All fields are required.";
            isLoading = false;
            return;
        }

        // Check if setTitle already exists
        if (await TitleExists(setTitle))
        {
            ErrorMessage = "A set with this title already exists.";
            isLoading = false;
            return;
        }

        // Create new set
        await CreateStudySet();
        isLoading = false;
    }

    private async Task<bool> TitleExists(string title)
    {
        CollectionReference userCollection = StudySproutDB.Collection("MyStudySetsDB");
        Query query = userCollection.WhereEqualTo("setTitle", title);
        QuerySnapshot snapshot = await query.GetSnapshotAsync();
        
        return snapshot.Documents.Count > 0;
    }

    private async Task CreateStudySet()
    {
        try
        {
            CollectionReference userCollection = StudySproutDB.Collection("MyStudySetsDB");
            
            // Create document data
            Dictionary<string, object> setData = new Dictionary<string, object>
            {
                { "setTitle", setTitle },
                { "description", description },
                { "learnBy", Timestamp.FromDateTime(learnBy.ToUniversalTime()) },
                { "IsSuccess", IsSuccess },
                { "CreatedDate", Timestamp.GetCurrentTimestamp() }
            };
            
            // Add the document
            DocumentReference docRef = await userCollection.AddAsync(setData);
            
            // Successfully created account
            StatusMessage = "Set created successfully!";
            
            // Set user in the user1 service
            set1.SetSet(setTitle, description, learnBy);
            
            await Task.Delay(1000); // Short delay to show success message
            if (IsSuccess)
            {
                Navigation.NavigateTo("/MyStudySets");
            }
            else
            {
                Navigation.NavigateTo("/CreateNew");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating set: {ex.Message}";
        }
    }

    private void ClearInputs()
    {
        setTitle = string.Empty;
        description = string.Empty;
        learnBy = DateTime.Now.AddDays(7);
    }

    private void HandleSetCreation()
    {
        // Add your sign-up logic here
        Console.WriteLine($"Title: {setTitle}, Description: {description}, LearnBy: {learnBy}");
    }

    public void GoToLogIn()
    {
        Navigation.NavigateTo("/signin", forceLoad: true);
    }
}