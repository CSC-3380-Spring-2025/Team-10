@using Google.Cloud.Firestore;
@inject NavigationManager Navigation
@rendermode InteractiveServer

@inject user1 user1

@page "/signup"

<PageTitle>Sign Up</PageTitle>

<div class="signup-page">
    <div class="signup-left">
        <h2 class="signup-text">
            I'M <span class="highlight">SO EXCITED</span> YOU'RE <span class="highlight">JOINING US</span>!!!!
        </h2>
        <br>
        <img src="Slink-In-Pot.png" alt="Slinkin Pot" class="signup-image" />
    </div>
    <div class="signup-right">
        <div class="signup-container">
            <h1>Sign Up</h1>
            <form @onsubmit="HandleSubmit">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" id="name" @bind="FullName" class="form-control" placeholder="Enter your name" />
                </div>
                <div class="form-group">
                    <label for="email">Email:</label>
                    <input type="email" id="email" @bind="Email" class="form-control" placeholder="Enter your email" />
                </div>
                <div class="form-group">
                    <label for="password">Password:</label>
                    <input type="password" id="password" @bind="Password" class="form-control" placeholder="Enter your password" />
                </div>
                <div class="form-group">
                    <label for="confirm-password">Confirm Password:</label>
                    <input type="password" id="confirm-password" @bind="ConfirmPassword" class="form-control" placeholder="Confirm your password" />
                </div>
                <button class="submit" type="submit" disabled="@isLoading">Sign Up</button>
                @if (isLoading)
                {
                    <span>Creating account...</span>
                }
                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <p>@StatusMessage</p>
                }
            </form>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="errorMessage">@ErrorMessage</p>
            }
            <p class="signin-link">
                Already have an account? <a href="/signin">Sign In</a>
            </p>
        </div>
    </div>
</div>

<style>
    .signup-page {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        background-color: rgb(255, 255, 255);
    }

    .signup-left {
        flex: 1;
        text-align: center;
        padding: 20px;
    }

    .signup-image {
        max-width: 75%;
        height: auto;
    }

    .signup-text {
        font-size: 24px;
        font-weight: bold;
        color: #000000;
        margin-top: 20px;
    }

    .highlight {
        color: #00b912;
    }

    .signup-right {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .signup-container {
        max-width: 400px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .signup-container h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .submit {
        width: 100%;
        padding: 10px;
        background-color: #00d44a;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .submit:hover {
        background-color: #00b321;
    }

    .signin-link {
        text-align: center;
        margin-top: 15px;
    }

    .signin-link a {
        color: #007bff;
        text-decoration: none;
    }

    .signin-link a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private string FullName { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;

    private bool IsUser { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
    private bool isLoading = false;

   FirestoreDb StudySproutDB = FirestoreDb.Create("studysprout-67ec9");

    private async Task HandleSubmit()
    {
        isLoading = true;
        ErrorMessage = string.Empty;
        StatusMessage = string.Empty;

        // Validate inputs
        if (string.IsNullOrEmpty(FullName) || string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Password))
        {
            ErrorMessage = "All fields are required.";
            isLoading = false;
            return;
        }

        if (Password != ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            isLoading = false;
            return;
        }

        if (Password.Length < 9)
        {
            ErrorMessage = "Password must be at least 9 characters long.";
            isLoading = false;
            return;
        }

        // Check if email already exists
        if (await EmailExists(Email))
        {
            ErrorMessage = "An account with this email already exists.";
            isLoading = false;
            return;
        }

        // Create new user
        await CreateNewUser();
        isLoading = false;
    }

    private async Task<bool> EmailExists(string email)
    {
        CollectionReference userCollection = StudySproutDB.Collection("UserAccount");
        Query query = userCollection.WhereEqualTo("Email", email);
        QuerySnapshot snapshot = await query.GetSnapshotAsync();
        
        return snapshot.Documents.Count > 0;
    }

    private async Task CreateNewUser()
    {
        try
        {
            CollectionReference userCollection = StudySproutDB.Collection("UserAccount");
            
            // Create document data
            Dictionary<string, object> userData = new Dictionary<string, object>
            {
                { "FullName", FullName },
                { "Email", Email },
                { "Password", Password },
                { "IsUser", IsUser },
                { "CreatedDate", Timestamp.GetCurrentTimestamp() }
            };
            
            // Add the document
            DocumentReference docRef = await userCollection.AddAsync(userData);
            
            // Successfully created account
            StatusMessage = "Account created successfully!";
            
            // Set user in the user1 service
            user1.SetUser(Email, Password);
            
            // Navigate to appropriate page based on user type
            await Task.Delay(1000); // Short delay to show success message
            if (IsUser)
            {
                Navigation.NavigateTo("/CreateNew");
            }
            else
            {
                Navigation.NavigateTo("/MyStudySets");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating account: {ex.Message}";
        }
    }

    private void HandleSignUp()
    {
        if (Password != ConfirmPassword)
        {
            Console.WriteLine("Passwords do not match!");
            return;
        }

        // Add your sign-up logic here
        Console.WriteLine($"Name: {FullName}, Email: {Email}, Password: {Password}");
    }
}
