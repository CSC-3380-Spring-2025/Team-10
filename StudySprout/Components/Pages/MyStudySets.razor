@using Google.Cloud.Firestore
@using StudySprout.Models
@using Microsoft.AspNetCore.Components.Web.Virtualization

@page "/MyStudySets"
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>MY STUDY SETS</PageTitle>

<header>
    <div class="logo">
        <img class="logo" src="/favicon.png" alt="Study Sprout Logo" />
        <nav>
            <a href="/MyStudySets" class="active">MY STUDY SETS</a>
            <a href="/CreateNew">CREATE NEW SET</a>
        </nav>
    </div>

    <div class="auth-links">
        <a href="/signup">Sign up</a>
        <a href="/signin" class="GoToLogIn">Log in</a>
    </div>
</header>

<div class="banner">
    <h1><span class="highlight">MY</span> STUDY SETS.</h1>
    <h4>READY, SET, STUDY!</h4>
    <img class="slink-icon" src="/Slink.png" alt="Slink Icon" />
</div>


@if (!dataLoaded)
{
    <p>Loading study sets...</p>
}
else if (isError)
{
    <p class="alert alert-danger">@errorMessage</p>
}
else if (sets == null || sets.Count == 0)
{
    <p>No study sets found. Create a new set to get started!</p>
}
else
{
    <div class="study-sets-container">
        @* First, show the data directly as a fallback *@
        <div class="study-sets-direct">
            @foreach (var set in sets)
            {
                <div class="study-set">
                    <h3>@set.TITLE</h3>
                    <p>@set.DESCRIPTION</p>
                    <p>Learn by: @set.LEARNBY.ToString("MMMM d, yyyy")</p>
                </div>
            }
        </div>
    </div>
}

@code {
    private FirestoreDb StudySproutDB;
    private List<StudySet> sets = new List<StudySet>();
    private bool isError = false;
    private bool dataLoaded = false;
    private string errorMessage = string.Empty;
    private System.Threading.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        // Start a timer to periodically refresh the UI
        _timer = new System.Threading.Timer(
            async _ => await InvokeAsync(StateHasChanged),
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(1)
        );

        // Direct async call instead of Task.Run
        await InitializeFirestore();
    }

    private async Task InitializeFirestore()
    {
        try
        {
            Console.WriteLine("Initializing Firestore");
            StudySproutDB = FirestoreDb.Create("studysprout-67ec9");
            await LoadStudySets();
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"Error initializing Firestore: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            dataLoaded = true;
            // Make sure this executes on the UI thread
            await InvokeAsync(StateHasChanged);
        }
    }

   private async Task LoadStudySets()
   {
        try
        {
            Console.WriteLine("Loading study sets from Firestore...");
            CollectionReference studySetsCollection = StudySproutDB.Collection("MyStudySetsDB");
            QuerySnapshot snapshot = await studySetsCollection.GetSnapshotAsync();

            var tempSets = new List<StudySet>();

            foreach (DocumentSnapshot document in snapshot.Documents)
            {
                if (document.Exists)
                {
                    Console.WriteLine($"Document ID: {document.Id}");
                    var data = document.ConvertTo<StudySet>();
                    tempSets.Add(data);
                    Console.WriteLine($"Added: TITLE={data.TITLE}");
                }
            }

            sets = tempSets;
            Console.WriteLine($"Total sets: {sets.Count}");
            
            // Make sure dataLoaded is set to true
            dataLoaded = true;
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"Error loading study sets: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    // This is an alternative approach if the Virtualize with Items doesn't work
    private async ValueTask<ItemsProviderResult<StudySet>> LoadVirtualizedStudySets(ItemsProviderRequest request)
    {
        Console.WriteLine($"Virtualization Request: StartIndex={request.StartIndex}, Count={request.Count}");

        var pageSize = request.Count;
        var startIndex = request.StartIndex;

        var paginatedSets = sets.Skip(startIndex).Take(pageSize).ToList();
        Console.WriteLine($"Returning {paginatedSets.Count} items out of {sets.Count} total items.");

        return new ItemsProviderResult<StudySet>(paginatedSets, sets.Count);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}