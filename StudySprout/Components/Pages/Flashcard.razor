@using StudySprout.Models
@using Microsoft.AspNetCore.Components.Web.Virtualization
@rendermode InteractiveServer
@using Google.Cloud.Firestore


@page "/flashcard"

<header>
    <div class="logo">
        <img class="logo" src="/favicon.png" alt="Study Sprout Logo" />
        <nav>
            <a href="/MyStudySets" class="active">MY STUDY SETS</a>
            <a href="/CreateNew">CREATE NEW SET</a>
        </nav>
    </div>

    <div class="auth-links">
        <a href="/signup">Sign up</a>
        <a href="/signin" class="GoToLogIn">Log in</a>
    </div>
</header>

<div class="card-counter">
  <h2>@CurrentCard/@TotalCards</h2>
</div>

<div class="card-wrapper">
    <input type="checkbox" id="flip-card" style="display: none;" @bind="IsFlipped" />
    <label for="flip-card">
        <div class="reversible">
            <div class="card tile-back">
                <div class="card-body">
                    <p>@CurrentFlashcard.Question</p>
                </div>
            </div>
            <div class="card tile-front">
                <div class="card-body">
                    <h1>@CurrentFlashcard.Answer</h1>
                </div>
            </div>
        </div>
    </label>

    <div class="arrows">
        <button class="arrow-left" @onclick="PreviousCard"></button>
        <button class="arrow-right" @onclick="NextCard"></button>
    </div>
</div>

@code {
    [Inject] //Firebase elements 
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private FirestoreDb FirestoreDb { get; set; }

    private int CurrentCard { get; set; } = 1;
    private int TotalCards { get; set; } = 0;
    private bool IsFlipped { get; set; } = false;

    private List<Flashcardset> Flashcards { get; set; } = new()
    {
        new Flashcardset { Question = "What is the best study tool?", Answer = "StudySprout" },
        new Flashcardset { Question = "What is better: Quizlet or StudySprout?", Answer = "StudySprout" },
        new Flashcardset { Question = "What study tool is everybody using?", Answer = "StudySprout duh" },
        new Flashcardset { Question = "What are Anki and Quizlet?", Answer = "Old study tools" },
        new Flashcardset { Question = "StudySprout is second to?", Answer = "No one!" },
        new Flashcardset { Question = "What grade is StudySprout going to get?", Answer = "100!!!!!" },
    };

    private Flashcardset CurrentFlashcard => Flashcards.Count > 0 ? Flashcards[CurrentCard - 1] : new Flashcardset();

    protected override async Task OnInitializedAsync()
    {
        //from firebase
        string studySetId = "set1";

        try
        {
            Flashcards = await GetFlashcardsByStudySetAsync(studySetId);
            TotalCards = Flashcards.Count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading flashcards: {ex.Message}");
        }
    }

    private void NextCard()
    {
        if (CurrentCard < Flashcards.Count)
        {
            CurrentCard++;
            IsFlipped = false; // unflip the card
        }
        StateHasChanged(); // show the new card
    }

    private void PreviousCard()
    {
        if (CurrentCard > 1)
        {
            CurrentCard--;
            IsFlipped = false; // unflip the card
        }
        StateHasChanged(); // show new card
    }

    public async Task<List<Flashcardset>> GetFlashcardsByStudySetAsync(string studySetId)
    {

        var studySetDoc = await FirestoreDb.Collection("StudySets").Document(studySetId).GetSnapshotAsync();
        if (!studySetDoc.Exists) throw new Exception("StudySet not found");

        
        var flashcardIds = studySetDoc.GetValue<List<string>>("FlashcardIDs");

        var flashcards = new List<Flashcardset>();
        foreach (var flashcardId in flashcardIds)
        {
            var flashcardDoc = await FirestoreDb.Collection("flashcards").Document(flashcardId).GetSnapshotAsync();
            if (flashcardDoc.Exists)
            {
                flashcards.Add(flashcardDoc.ConvertTo<Flashcardset>());
            }
        }

        return flashcards;
    }

    public class Flashcardset
    {
        public string? Question { get; set; }
        public string? Answer { get; set; }
    }
}