@using Google.Cloud.Firestore;

@page "/CreateNew"
@attribute [StreamRendering]

<PageTitle>CREATE NEW</PageTitle>

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f7fa;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h1 {
        text-align: center;
        color: #2a9d8f;
        font-size: 2rem;
        margin-top: 50px;
    }

    p {
        text-align: center;
        color: #555;
        font-size: 1.2rem;
    }

    div {
        max-width: 600px;
        margin: 0 auto;
        padding: 30px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    label {
        font-size: 1rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 5px;
        display: block;
    }

    input[type="text"], input[type="date"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    button.btn {
        display: block;
        width: 100%;
        padding: 15px;
        background-color: #2a9d8f;
        color: white;
        font-size: 1rem;
    using Microsoft.AspNetCore.Http.HttpResults;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/lillianandino/Desktop/SPRING25/ood/Team-10/StudySprout/Components/Pages/CreateNew.razor"
 "/Users/lillianandino/Desktop/SPRING25/ood/Team-10/StudySprout/Components/Pages/CreateNew.razor"
ton.btn:hover {
        background-color: #1f7a68;
    }

    .alert {
        padding: 10px;
        border-radius: 4px;
        margin-top: 10px;
        text-align: center;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .background-container {
        background-image: url('/Users/lillianandino/Desktop/SPRING25/oo design/Team-10/StudySprout/wwwroot/background-create-new.jpeg'); /* Path to your image */
        background-size: cover; /* Ensure the image covers the entire container */
        background-position: center; /* Center the background image */
        background-repeat: no-repeat; /* Don't repeat the background */
        padding: 20px; /* Add some padding around the content */
        color: white; /* White text color for visibility */
    }
</style>

<h1>CREATE A NEW STUDY SET.</h1>

<p>READY, SET, STUDY!</p>

<!-- Create your own set of flashcards to study from.-->
<div>
    <label for="setTitle">SET TITLE</label>
    <input type="text" id="setTitle" @bind="setTitle" required />

    <label for="description">DESCRIPTION</label>
    <input type="text" id="description" @bind="description"/>

    <label for="dueDate">LEARN BY</label>
    <input type="date" id="dueDate" @bind="dueDate"/>

    <!-- Create your set -->
    <button class="btn btn-primary" @onclick="CreateStudySet">CREATE</button>
</div>

@if (isSuccess)
{
    <p class="alert alert-success">Study set created successfully!</p>
}

@if (isError)
{
    <p class="alert alert-danger">Error: Please fill out all fields correctly!</p>
}

<h2>My Study Sets</h2>
@if (sets != null && sets.Count > 0)
{
    <ul>
        @foreach (var set in sets)
        {
            <li>
                <h3>@set.Title</h3>
                <p>@set.Description</p>
                <p>LEARN BY: @set.DueDate.ToShortDateString()</p>
            </li>
        }
    </ul>
}
else
{
    <p>No study sets available. Create your first study set!</p>
}

@code
{
    public string setTitle { get; set; }
    public string description { get; set; }
    public DateTime dueDate { get; set; }
    public bool isSuccess { get; set; }
    public bool isError { get; set; }
    public string errorMessage { get; set; }

    private FirestoreDb MyStudySets;

    public List<StudySet> sets { get; set; } = new List<StudySet>();

    protected override async Task OnInitializedAsync()
    {
        MyStudySets = FirestoreDb.Create("studysprout-67ec9");
        await LoadStudySets();
    }
    private async Task CreateStudySet()
    {
        // Reset success and error states
        isSuccess = false;
        isError = false;
        errorMessage = string.Empty;

        // Validate input
        try
        {
            if (string.IsNullOrEmpty(setTitle) || string.IsNullOrEmpty(description) || dueDate == default)
            {
                isError = true; // Show error if any required field is empty
                errorMessage = "Please fill out all fields correctly!";
                return;
            }

            var studySetData = new
            {
                Title = setTitle,
                Description = description,
                DueDate = dueDate,
                Created = DateTime.UtcNow
            };

            CollectionReference studySetsCollection = MyStudySets.Collection("StudySets");
            await studySetsCollection.AddAsync(studySetData);
            
            isSuccess = true;
            await ReloadStudySets();
            ClearInputs();
        }
        catch (Exception e)
        {
            isError = true;
            errorMessage = $"An error occurred: {e.Message}";
        }
    }

    private async Task LoadStudySets()
    {
        try
        {
            CollectionReference studySetsCollection = MyStudySets.Collection("StudySets");
            QuerySnapshot snapshot = await studySetsCollection.GetSnapshotAsync();

            sets.Clear();

            // Loop through documents and populate the local list
            foreach (DocumentSnapshot document in snapshot.Documents)
            {
                if (document.Exists)
                {
                    var data = document.ConvertTo<StudySet>();
                    sets.Add(data);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle errors
            isError = true;
            errorMessage = $"An error occurred while loading study sets: {ex.Message}";
        }
    }
    private async Task ReloadStudySets()
    {
        await LoadStudySets();
    }

    // Method to clear the input fields
    private void ClearInputs()
    {
        setTitle = string.Empty;
        description = string.Empty;
        dueDate = default;
    }
    public class StudySet
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime Created { get; set; }
    }
}