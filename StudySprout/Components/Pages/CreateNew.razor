@using Google.Cloud.Firestore;
@using StudySprout.Models

@page "/CreateNew"
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<PageTitle>CREATE NEW</PageTitle>
3
<header>
    <div class="logo">
        <img class="logo" src="/favicon.png" alt="Study Sprout Logo" />
        <nav>
            <a href="/MyStudySets">MY STUDY SETS</a>
            <a href="/CreateNew" class="active">CREATE NEW SET</a>
        </nav>
    </div>

    <div class="auth-links">
        <a href="/signup">Sign up</a>
        <a href="/signin" class="GoToLogIn">Log in</a>
    </div>
</header>

<div class="banner">
    <h1><span class="highlight">CREATE</span> A NEW</h1>
    <h1><span class="highlight">STUDY SET.</span></h1>
    <img class="slink-icon" src="/Slink.png" alt="Slink Icon"/>
</div>

<main>
    <div class="debug-info">
        <h3>Debug Info:</h3>
        <p>Firestore Status: @(StudySproutDB != null ? "Connected" : "Not Connected")</p>
        <p>Last Action: @debugLastAction</p>
    </div>
    
    <form @onsubmit="HandleFormSubmit" @onsubmit:preventDefault="true">
        <div>
            <label for="setTitle">SET TITLE</label>
            <input type="text" id="setTitle" @bind="setTitle" @bind:event="oninput" />
            @if (!string.IsNullOrEmpty(validationErrors["TITLE"]))
            {
                <p class="alert alert-danger">@validationErrors["TITLE"]</p>
            }
        </div>

        <div>
            <label for="description">DESCRIPTION</label>
            <input type="text" id="description" @bind="description" @bind:event="oninput" />
            @if (!string.IsNullOrEmpty(validationErrors["DESCRIPTION"]))
            {
                <p class="alert alert-danger">@validationErrors["DESCRIPTION"]</p>
            }
        </div>

        <div>
            <label for="learnBy">LEARN BY</label>
            <input type="date" id="learnBy" @bind="learnBy" />
        </div>

        <div>
            <button type="button" class="btn btn-primary" @onclick="HandleCreateButtonClick">CREATE</button>
        </div>
    </form>

    @if (isSuccess)
    {
        <p class="alert alert-success">Study set created successfully!</p>
    }

    @if (isError)
    {
        <p class="alert alert-danger">@errorMessage</p>
    }

    <h3>Debug Logs</h3>
    <div class="debug-logs">
        @foreach (var log in debugLogs)
        {
            <div class="log-entry">@log</div>
        }
    </div>

    @if (sets != null && sets.Count > 0)
    {
        <h3>Recent Study Sets</h3>
        <ul>
            @foreach (var set in sets)
            {
                <li>
                    <h3>@set.TITLE</h3>
                    <p>@set.DESCRIPTION</p>
                    <p><strong>LEARN BY</strong> @set.LEARNBY.ToString("MMMM d, yyyy")</p>
                </li>
            }
        </ul>
    }
    else if (dataLoaded)
    {
        <p>No study sets available. Create your first study set!</p>
    }
</main>


<style>
    body, html {
        margin: 0;
        padding: 0;
        font-family: 'Arial', sans-serif;
        box-sizing: border-box;
    }

    * {
        box-sizing: inherit;
    }

    body {
        background-color: #ffffff;
        color: #333;
        line-height: 1.6;
        font-size: 16px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    main {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        flex-grow: 1;
    }

    h1 {
        text-align: center;
        color: #000000;
        font-size: 4rem;
        margin-top: -5px;
        text-shadow: 3px 5px 10px #ffffff;
        font-weight: bold;
    }
    
    h4 {
        text-align: center;
        color: #851212;
        text-shadow: 2px 2px 5px #ffffff;
        margin-top: 10px;
        font-weight: bold;
        font-size: 30px;
    }

    p {
        text-align: center;
        color: #555;
        font-size: 1.1rem;
        margin-bottom: 20px;
    }

    form {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    label {
        font-size: 1rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 5px;
        display: block;
    }

    input[type="text"], input[type="date"], textarea, select {
        width: 100%;
        padding: 12px;
        margin-bottom: 20px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    input:focus, textarea:focus, select:focus {
        border-color: #2a9d8f;
        outline: none;
    }

    button.btn {
        display: block;
        width: 100%;
        padding: 15px;
        background-color: #2a9d41;
        color: white;
        font-size: 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button.btn:hover {
        background-color: #1f7a68;
    }

    .alert {
        padding: 12px;
        border-radius: 5px;
        margin-top: 10px;
        text-align: center;
        font-size: 1rem;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    ul {
        list-style: none;
        padding: 0;
    }

    ul li {
        background: #fff;
        margin: 10px 0;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    ul li h3 {
        margin: 0;
        font-size: 1.5rem;
        color: #2a9d8f;
    }

    ul li p {
        margin: 5px 0 0;
        color: #555;
        font-size: 1rem;
    }

    footer {
        background-color: #2a9d8f;
        color: white;
        padding: 15px 0;
        text-align: center;
    }

    footer a {
        color: white;
        text-decoration: none;
    }

    footer a:hover {
        text-decoration: underline;
    }

    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: #ffffff;
        width: 160%;
        margin-left: -231px;
        margin-top: -16px;
        box-sizing: border-box;
    }

    img {
        max-width: 100%;
        height: auto;
    }

    header nav {
        display: flex;
        gap: 49px;
    }

    header nav a {
        text-decoration: none;
        color: #4e7429;
        font-weight: bold;
        font-size: 1rem;
    }

    header nav a:hover {
        text-decoration: underline;
    }

    .logo img {
        height: 50px;
        width: 45px;
        margin-top: -8px;
    }

    .slink-icon {
        position: absolute;
        bottom: 10px;
        right: 20px;
        height: 80px;
        width: 135px;
    }

    .auth-links a {
        text-decoration: none;
        font-weight: bold;
        font-size: 1rem;
        color: #4e7429;
        padding: 5px 15px;
        border: 1px solid #4e7429;
        border-radius: 5px;
    }

    .auth-links a:hover {
        background-color: #4e7429;
        color: white;
    }

    .banner {
        background-image: url('background3.jpg');
        background-size: cover;
        background-position: top;
        text-align: center;
        color: white;
        padding: 50px 20px;
        position: relative;
        width: 165%;
        margin-left: -230px;
        height: 248px;
        box-sizing: border-box;
        font-weight: bolder;
    }
    .debug-info {
        margin: 20px auto;
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .debug-logs {
        max-height: 200px;
        overflow-y: auto;
        margin: 20px auto;
        padding: 10px;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-family: monospace;
    }
    
    .log-entry {
        margin-bottom: 5px;
        padding: 3px;
        border-bottom: 1px solid #eee;
    }
</style>

@code
{
    FirestoreDb StudySproutDB;

    public List<StudySet> sets { get; set; } = new List<StudySet>();
    private System.Threading.Timer _timer;

    public string setTitle { get; set; } = "";
    public string description { get; set; } = "";
    public DateTime learnBy { get; set; } = DateTime.Now.AddDays(7);

    public bool isSuccess { get; set; } = false;
    public bool isError { get; set; } = false;
    public bool dataLoaded { get; set; } = false;
    public string errorMessage { get; set; } = string.Empty;
    public string debugLastAction { get; set; } = "None";
    public List<string> debugLogs { get; set; } = new List<string>();
    
    public int buttonClickCount { get; set; } = 0;
    public int formSubmitCount { get; set; } = 0;
    
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>
    {
        { "TITLE", "" },
        { "DESCRIPTION", "" }
    };


    private void AddLog(string message)
    {
        debugLogs.Insert(0, $"[{DateTime.Now:HH:mm:ss}] {message}");
        Console.WriteLine(message);
        if (debugLogs.Count > 20) debugLogs.RemoveAt(debugLogs.Count - 1);
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        AddLog("Page initialized");
        _timer = new System.Threading.Timer(
            callback: async state => await InvokeAsync(StateHasChanged),
            state: null,
            dueTime: TimeSpan.FromSeconds(1),
            period: TimeSpan.FromSeconds(1)
        );

        await InitializeFirestore();
    }

    private async Task InitializeFirestore()
    {
        AddLog("Initializing Firestore");
        debugLastAction = "Initializing";
        
        try
        {
            StudySproutDB = FirestoreDb.Create("studysprout-67ec9");
            AddLog("Firestore initialized successfully");
            
            await LoadStudySets();
            dataLoaded = true;
            debugLastAction = "Initialized";
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"Error initializing Firestore: {ex.Message}";
            AddLog($"ERROR: {errorMessage}");
            if (ex.InnerException != null)
            {
                AddLog($"Inner Exception: {ex.InnerException.Message}");
            }
            debugLastAction = "Error";
        }
    }

    private async Task CreateStudySet()
    {
        AddLog($"===== STARTING CreateStudySet =====");
        AddLog($"Form submitted - Title: {setTitle}, Description: {description}");
        debugLastAction = "Creating Study Set";
        
        isSuccess = false;
        isError = false;
        errorMessage = string.Empty;
        ResetValidation();

        bool isValid = true;
        if (string.IsNullOrEmpty(setTitle))
        {
            validationErrors["TITLE"] = "Set Title is required.";
            isValid = false;
        }
        if (string.IsNullOrEmpty(description))
        {
            validationErrors["DESCRIPTION"] = "Description is required.";
            isValid = false;
        }

        if (!isValid)
        {
            AddLog("Validation failed: Missing required fields.");
            await InvokeAsync(StateHasChanged);
            return;
        }

        try 
        {
            AddLog("Connecting to Firestore...");
            
            if (StudySproutDB == null)
            {
                AddLog("ERROR: Firestore DB is null, trying to recreate connection");
                StudySproutDB = FirestoreDb.Create("studysprout-67ec9");
            }
            
            AddLog("Getting collection reference: MyStudySetsDB");
            CollectionReference studySetsCollection = StudySproutDB.Collection("MyStudySetsDB");
            
            AddLog("Creating new StudySet object");
            var newStudySet = new StudySet
            {
                TITLE = setTitle,
                DESCRIPTION = description,
                LEARNBY = learnBy,
                CREATED = Timestamp.FromDateTime(DateTime.UtcNow)
            };
            
            AddLog($"Creating StudySet: TITLE={setTitle}, DESCRIPTION={description}, LEARNBY={learnBy}");
            
            var properties = typeof(StudySet).GetProperties();
            foreach (var prop in properties)
            {
                var value = prop.GetValue(newStudySet);
                AddLog($"Property {prop.Name} = {value}");
            }

            AddLog("Calling AddAsync to save to Firestore...");
            DocumentReference addedDocRef = await studySetsCollection.AddAsync(newStudySet);
            
            AddLog($"Document added with ID: {addedDocRef.Id}");
            
            isSuccess = true;
            debugLastAction = "Study Set Created";
            
            await LoadStudySets();
            ClearInputs();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            AddLog($"ERROR saving to Firestore: {e.Message}");
            if (e.InnerException != null)
            {
                AddLog($"Inner Exception: {e.InnerException.Message}");
            }
            isError = true;
            errorMessage = $"Error saving to Firestore: {e.Message}";
            debugLastAction = "Error";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadStudySets()
    {
        try
        {
            AddLog("Loading study sets from Firestore...");
            
            if (StudySproutDB == null)
            {
                AddLog("ERROR: Firestore DB is null, trying to recreate connection");
                StudySproutDB = FirestoreDb.Create("studysprout-67ec9");
            }
            
            CollectionReference studySetsCollection = StudySproutDB.Collection("MyStudySetsDB");
            AddLog("Getting snapshot from MyStudySetsDB collection");
            
            QuerySnapshot snapshot = await studySetsCollection.GetSnapshotAsync();
            AddLog($"Got {snapshot.Documents.Count} documents in snapshot");
            
            var tempSets = new List<StudySet>();

            foreach (DocumentSnapshot document in snapshot.Documents)
            {
                if (document.Exists)
                {
                    AddLog($"Document ID: {document.Id}");
                    
                    try
                    {
                        var data = document.ConvertTo<StudySet>();
                        tempSets.Add(data);
                        AddLog($"Added set: {data.TITLE}");
                    }

                    catch (Exception convEx)
                    {
                        AddLog($"ERROR converting document: {convEx.Message}");
                        try
                        {
                            // Try first with Dictionary for more reliable deserialization
                            Dictionary<string, object> docData = document.ToDictionary();
                            var studySet = new StudySet
                            {
                                TITLE = docData.ContainsKey("TITLE") ? docData["TITLE"].ToString() : "",
                                DESCRIPTION = docData.ContainsKey("DESCRIPTION") ? docData["DESCRIPTION"].ToString() : "",
                                LEARNBY = docData.ContainsKey("LEARNBY") ? 
                                    (docData["LEARNBY"] is Timestamp ts ? ts.ToDateTime() : DateTime.Now) : 
                                    DateTime.Now,
                                CREATED = docData.ContainsKey("CREATED") ?
                                    (docData["CREATED"] is Timestamp created ? created : Timestamp.FromDateTime(DateTime.UtcNow)) :
                                    Timestamp.FromDateTime(DateTime.UtcNow)
                            };
                            tempSets.Add(studySet);
                            AddLog($"Added set (using manual conversion): {studySet.TITLE}");
                        }
                        catch (Exception secEx)
                        {
                            AddLog($"SECOND ERROR converting document: {secEx.Message}");
                        }
                    }
                }
            }
            sets = tempSets;
            AddLog($"Loaded {sets.Count} study sets successfully");
            dataLoaded = true;
        }
        catch (Exception ex)
        {
            AddLog($"ERROR loading study sets: {ex.Message}");
            if (ex.InnerException != null)
            {
                AddLog($"Inner Exception: {ex.InnerException.Message}");
            }
            isError = true;
            errorMessage = $"An error occurred while loading study sets: {ex.Message}";
        }
    }

    private async Task HandleCreateButtonClick()
    {
        buttonClickCount++;
        AddLog($"Create button clicked (count: {buttonClickCount})");
        try
        {
            await CreateStudySet();
        }
        catch (Exception ex)
        {
            AddLog($"ERROR in button click handler: {ex.Message}");
            isError = true;
            errorMessage = $"Error in button handler: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleFormSubmit()
    {
        formSubmitCount++;
        AddLog($"Form submitted via submit event (count: {formSubmitCount})");
        try 
        {
            await CreateStudySet();
        }
        catch (Exception ex)
        {
            AddLog($"ERROR in form submit handler: {ex.Message}");
            if (ex.InnerException != null)
            {
                AddLog($"Inner Exception: {ex.InnerException.Message}");
            }
            isError = true;
            errorMessage = $"Error in form submit handler: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ClearInputs()
    {
        setTitle = string.Empty;
        description = string.Empty;
        learnBy = DateTime.Now.AddDays(7);
    }

    private void ResetValidation()
    {
        validationErrors["TITLE"] = "";
        validationErrors["DESCRIPTION"] = "";
    }

    public void GoToLogIn()
    {
        Navigation.NavigateTo("/signin", forceLoad: true);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}