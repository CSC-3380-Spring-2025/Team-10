@using Google.Cloud.Firestore
@using StudySprout.Models
@using Microsoft.AspNetCore.Components.Web.Virtualization

@page "/MyStudySets"
@attribute [StreamRendering]
@inject NavigationManager Navigation

<PageTitle>MY STUDY SETS</PageTitle>

<header>
    <div class="logo">
        <img class="logo" src="/favicon.png" alt="Study Sprout Logo" />
        <nav>
            @*<a href="/MyGarden">MY GARDEN</a>*@
            <a href="/MyStudySets" class="active">MY STUDY SETS</a>
            <a href="/CreateNew">CREATE NEW SET</a>
        </nav>
    </div>

    <div class="auth-links">
        <a href="/signup">Sign up</a>
        <a href="/signin" class="GoToLogIn">Log in</a>
    </div>
</header>

<div class="banner">
    <h1><span class="highlight">MY</span> STUDY SETS.</h1>
    <h4>READY, SET, STUDY!</h4>
    <img class="slink-icon" src="/Slink.png" alt="Slink Icon" />
</div>

@if (sets == null || sets.Count == 0)
{
    if (!isError)
    {
        <p>Loading study sets...</p>
    }
    else
    {
        <p class="alert alert-danger">@errorMessage</p>
    }
}
else
{
    <Virtualize ItemsProvider="LoadVirtualizedStudySets" Context="set">
        <div class="study-set">
            <h3>@set.TITLE</h3>
            <p>@set.DESCRIPTION</p>
            <div class="buttons">
                <a class="btn btn-learn" href="#">LEARN BY @set.LEARNBY.ToString("MMMM d, yyyy")</a>
                <a class="btn btn-days" href="#">DAYS REMAINING: @(DateTime.Now - @set.LEARNBY).Days</a>
            </div>
        </div>
    </Virtualize>
}

@code
{
    private FirestoreDb StudySproutDB;
    public List<StudySet> sets { get; set; } = new List<StudySet>();
    public bool isError { get; set; }
    public string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing Firestore");
        try
        {
            StudySproutDB = FirestoreDb.Create("studysprout-67ec9");
            await LoadStudySets();
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"Error initializing Firestore: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        StateHasChanged();
    }

    private async Task LoadStudySets()
    {
        try
        {
            Console.WriteLine("Loading study sets from Firestore...");
            CollectionReference studySetsCollection = StudySproutDB.Collection("MyStudySetsDB");
            QuerySnapshot snapshot = await studySetsCollection.GetSnapshotAsync();

            sets.Clear();

            foreach (DocumentSnapshot document in snapshot.Documents)
            {
                if (document.Exists)
                {
                    Console.WriteLine($"Document ID: {document.Id}");
                    foreach (var field in document.ToDictionary())
                    {
                        Console.WriteLine($"{field.Key}: {field.Value}");
                    }
                    var data = document.ConvertTo<StudySet>();
                    sets.Add(data);
                    Console.WriteLine($"Added to sets: TITLE={data.TITLE}, DESCRIPTION={data.DESCRIPTION}, LEARNBY={data.LEARNBY}");
                }
            }
            Console.WriteLine($"Total sets: {sets.Count}");
            Console.WriteLine("Study sets loaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading study sets: {ex.Message}");
            isError = true;
            errorMessage = $"An error occurred while loading study sets: {ex.Message}";
        }
        StateHasChanged();
    }

    public void GoToLogIn()
    {
        Console.WriteLine("Go to LogIn/SignIn...");
        Navigation.NavigateTo("/signin", forceLoad: true);
    }

    private async ValueTask<ItemsProviderResult<StudySet>> LoadVirtualizedStudySets(ItemsProviderRequest request)
    {
        try
        {
            var pageSize = request.Count;
            var startIndex = request.StartIndex;

            var paginatedSets = sets.Skip(startIndex).Take(pageSize).ToList();

            return new ItemsProviderResult<StudySet>(paginatedSets, sets.Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading virtualized study sets: {ex.Message}");
            isError = true;
            errorMessage = $"An error occurred while loading study sets: {ex.Message}";
            return new ItemsProviderResult<StudySet>(new List<StudySet>(), 0);
        }
    }
}