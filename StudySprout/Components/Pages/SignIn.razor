@using Google.Cloud.Firestore;
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject user1 user1

@page "/signin"

<PageTitle>Sign In</PageTitle>
<div class="signin-page">
    <div class="signin-left">
        <h2 class="signin-text"><span class="bold">Welcome Back!</span></h2>
        <h3 class="signin-text">Log into your account!</h3>
        <img src="Slink.png" alt="Slink" class="signin-image" />
    </div>
    <div class="signin-container">
        <h1>Sign In</h1>
        <form @onsubmit="HandleSubmit">
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" @bind="Email" class="form-control" placeholder="Enter your email" maxlength="60" minlength="3" required />
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" @bind="Password" class="form-control" placeholder="Enter your password" size="30" maxlength="69" minlength="9" required/>
            </div>
            <button type="submit" disabled="@isLoading">Sign In</button>
            @if (isLoading)
            {
                <span>Loading...</span>
            }
            @if (!string.IsNullOrEmpty(LoginMsg))
            {
                <p>@LoginMsg</p>
            }
        </form>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class=" errorMessage">@ErrorMessage</p>
        }
        <p class="forgot-password">
            Forgot Password? <a href="/forgotpassword">Forgot Password</a>
        </p>
        <p class="signup-link">
            Don't have an account? <a href="/signup">Sign Up</a>
        </p>
    </div>
</div>
<style>
     .signin-page {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        background-color: rgb(255, 255, 255);
    }

     .signup-left {
        flex: 1;
        text-align: center;
        padding: 20px;
    }

    .signin-image {
        max-width: 50%;
        height: auto;
    }

     .signin-text {
        font-size: 32px;
        color: #000000;
        margin-top: 20px;
        text-align: center;
    }
    

    .signin-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .signin-container h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btn {
        width: 100%;
        padding: 10px;
        background-color: #00d44a;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #00b321;
    }

    .signup-link {
        text-align: center;
        margin-top: 15px;
    }

    .signup-link a {
        color: #007bff;
        text-decoration: none;
    }

    .signup-link a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string LoginMsg = "";
    private bool isLoading = false;
    FirestoreDb StudySproutDB = FirestoreDb.Create("studysprout-67ec9");


    public class Users
    {
        public string id { get; set; }
        public string email { get; set; }
        public string password { get; set; }
        public Boolean isUser { get; set; }
    }

    private IEnumerable<Users> users = Array.Empty<Users>();
    
    private async Task HandleSubmit()
    {
        isLoading = true;
        await retrieveData();
        isLoading = false;
    }

    private async Task retrieveData()
    {
        CollectionReference userCollection = StudySproutDB.Collection("UserAccount");
        QuerySnapshot snapshot = await userCollection.GetSnapshotAsync();
        var list = new List<Users>();
        
        foreach(var doc in snapshot.Documents)
        {
            list.Add(new Users {id = doc.Id, email = doc.GetValue<string>("Email"), password = doc.GetValue<string>("Password"), isUser = doc.GetValue<Boolean>("IsUser")});
        }
        users = list;

        int isSuccessful = -1;
        foreach(var u in users)
        {
            if(u.email == Email && u.password == Password)
            {
                LoginMsg = "Logged in!";
                isSuccessful = 1;
                user1.SetUser(Email, Password);
                LoginMsg = user1.email;

                if(u.isUser == true)
                {
                    Navigation.NavigateTo("/CreateNew");
                }
                else
                {
                    Navigation.NavigateTo("/");
                }
                break;
            }
            else
            {
                isSuccessful = 0;
            }
        }
        if(isSuccessful == 0) LoginMsg = "Invalid email or password. Try again!";
    }

    private void HandleSignIn()
    {
        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Password))
        {
            ErrorMessage = "Please enter both email and password.";
            return;
        }
        Console.WriteLine($"Email: {Email}, Password: {Password}");
    }
}